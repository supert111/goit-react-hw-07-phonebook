{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","searchByFilter","axios","defaults","baseURL","getIsLoading","state","loading","searchFilter","createSelector","contacts","filter","caseInsensitive","toLowerCase","contact","name","includes","createReducer","_","payload","find","alert","number","id","error","combineReducers","nameInputId","shortid","generate","phoneInputId","ContactForm","handleChange","element","target","value","setState","handleSubmit","el","preventDefault","props","onSubmit","className","styles","wrapper","this","htmlFor","input_display","type","pattern","title","required","onChange","button_prime","Component","connect","dispatch","a","post","data","console","log","addContact","phoneBook","onDeleteContact","contactId","delete","map","nameContact","button","onClick","e","App","handleFilter","fetchContact","container","isLoading","get","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55eae1a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactForm_wrapper__Yju5d\",\"input_display\":\"ContactForm_input_display__1HQ6E\",\"button_prime\":\"ContactForm_button_prime__iavMc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__3gFlr\",\"contact\":\"ContactList_contact__1-Sk9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3_Wnq\",\"wrapper\":\"App_wrapper__3AY0F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_display\":\"Filter_input_display__1-LR_\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const searchByFilter = createAction('contacts/SearchByFilter');\r\n","import axios from 'axios';\r\nimport {\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactSuccess,\r\n    addContactRequest,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        console.log('fetchContacts', data)\r\n        dispatch(fetchContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error));\r\n    }\r\n};\r\n\r\nexport const addContact = ({name, number}) => async dispatch => {\r\n    const contact = {name, number};\r\n    \r\n    dispatch(addContactRequest());\r\n    try {\r\n        const { data } = await axios.post('/contacts', contact);\r\n        console.log('add', data)\r\n        dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(addContactError(error));\r\n    }\r\n};\r\n\r\nexport const deleteContact = contactId => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    try {\r\n        const { data } = await axios.delete(`/contacts/${contactId}`);\r\n        console.log('delete', data)\r\n        dispatch(deleteContactSuccess(data))\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error))\r\n    }\r\n};\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n// import axios from 'axios';\r\n// import {\r\n//     fetchContactRequest,\r\n//     fetchContactSuccess,\r\n//     fetchContactError,\r\n//     addContactSuccess,\r\n//     addContactRequest,\r\n//     addContactError,\r\n//     deleteContactRequest,\r\n//     deleteContactSuccess,\r\n//     deleteContactError,\r\n// } from './contacts-actions';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n// export const fetchContacts = () => dispatch => {\r\n//     dispatch(fetchContactRequest());\r\n\r\n//     axios\r\n//         .get('/contacts')\r\n//         .then(({data}) => dispatch(fetchContactSuccess(data)))\r\n//         .catch(error => dispatch(fetchContactError(error)));\r\n// };\r\n\r\n// export const addContact = ({name, number}) => dispatch => {\r\n//     const contact = {name, number};\r\n\r\n//     dispatch(addContactRequest());\r\n\r\n//     axios\r\n//         .post('/contacts', contact)\r\n//         .then(({data}) => dispatch(addContactSuccess(data)))\r\n//         .catch(error => dispatch(addContactError(error)));\r\n// }\r\n\r\n// export const deleteContact = contactId => dispatch => {\r\n//     dispatch(deleteContactRequest());\r\n\r\n//     axios\r\n//         .delete(`/contacts/${contactId}`)\r\n//         .then(() => dispatch(deleteContactSuccess(contactId)))\r\n//         .catch(error => dispatch(deleteContactError(error)));\r\n// };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getIsLoading = state => state.state.loading;\r\nexport const getFilter = state => state.state.filter;\r\nexport const getAllContacts = state => state.state.contacts;\r\n\r\n//memoization\r\nexport const searchFilter = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const caseInsensitive = filter.toLowerCase();\r\n\r\n        return contacts.filter(contact => \r\n            contact.name.toLowerCase().includes(caseInsensitive)\r\n        );\r\n    }\r\n);\r\n\r\n\r\n///////////////////////////////////////////////////\r\n// export const searchFilter = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const caseInsensitive = filter.toLowerCase();\r\n\r\n//     return contacts.filter(contact => \r\n//         contact.name.toLowerCase() === caseInsensitive)\r\n// }","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactSuccess,\r\n    addContactRequest,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    searchByFilter\r\n} from '../contacts/contacts-actions';\r\n\r\nconst contacts = createReducer([], \r\n    {[fetchContactSuccess]:(_, { payload }) => payload, \r\n    [addContactSuccess]: (state, { payload }) => {\r\n        const duplicateName = state.find(contact => contact.name === payload.name);\r\n        \r\n        if(duplicateName) {\r\n            alert(`${payload.name} is already in contacts.`);\r\n            return state;\r\n        }\r\n\r\n        if(payload.name === \"\") {\r\n            alert(`Please fill out the form it is empty.`);\r\n            return state;\r\n        }\r\n\r\n        if(payload.number === \"\") {\r\n            alert(`Please fill out the form with your phone number, it is empty.`);\r\n            return state;\r\n        }\r\n\r\n        return [payload, ...state,];\r\n    },\r\n    [deleteContactSuccess]: (state, { payload }) => (state.filter(({id}) => id !== payload)),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [searchByFilter]: (_, { payload }) => payload,\r\n})\r\n\r\nconst error = createReducer(null, {\r\n    [fetchContactError]: (_, { payload }) => payload,\r\n    [addContactError]: (_, { payload }) => payload,\r\n    [deleteContactError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    contacts,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","import PropTypes from 'prop-types';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styles from \"./ContactForm.module.css\";\r\nimport shortid from 'shortid';\r\nimport { addContact } from '../../redux/contacts';\r\n\r\nconst nameInputId = shortid.generate();\r\nconst phoneInputId = shortid.generate();\r\n\r\nclass ContactForm extends Component { \r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n    handleChange = (element) => {\r\n        const { name, value } = element.target;\r\n        this.setState ({ [name]: value }); \r\n    };\r\n\r\n    handleSubmit = (el) => {\r\n        el.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.setState({ name: '', number: '' });\r\n    }\r\n\r\n   render() {\r\n        return (\r\n            \r\n                <form className={styles.wrapper} onSubmit={this.handleSubmit}>\r\n                    <label htmlFor={nameInputId}>Name\r\n                        <input className={styles.input_display}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            id={nameInputId}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <label htmlFor={phoneInputId}>Number\r\n                        <input className={styles.input_display}\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                            id={phoneInputId}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <button className={styles.button_prime} type=\"submit\" >Add contact</button>\r\n                </form>            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(addContact( name, number )),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from \"react\";\r\n//import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport { deleteContact, searchFilter } from '../../redux/contacts';\r\n\r\nconst ContactList = ({ phoneBook, onDeleteContact }) => {\r\n  return (\r\n      <ul>\r\n        {phoneBook.map(nameContact => (\r\n          <li className={styles.contact} key={nameContact.id}>{nameContact.name}: {nameContact.number}\r\n            <button className={styles.button} type=\"button\" onClick={()=>onDeleteContact(nameContact.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n  )\r\n};\r\n\r\n// ContactList.propTypes = {\r\n//     phoneBook: PropTypes.arrayOf(\r\n//       PropTypes.shape({\r\n//         id: PropTypes.string.isRequired,\r\n//         name: PropTypes.string.isRequired,\r\n//         number: PropTypes.string.isRequired,\r\n//       }),\r\n//     ),\r\n//     onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  phoneBook: searchFilter(state),\r\n})\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactList);","import React from \"react\";\r\nimport styles from \"./Filter.module.css\"\r\nimport { connect } from 'react-redux';\r\nimport {searchByFilter} from '../../redux/contacts';\r\n\r\nconst Filter = ({onChange}) => {\r\n    return (\r\n        <label>Find contacts by name\r\n            <input className={styles.input_display}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={onChange}\r\n            />\r\n        </label>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(searchByFilter(e.target.value)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter\";\r\nimport { fetchContacts, getIsLoading } from './redux/contacts';\r\nimport styles from \"./App.module.css\"\r\n\r\nclass App extends Component { \r\n\r\n    state = {};\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContact();\r\n    }\r\n\r\n    handleFilter = (element) => {\r\n        const { value } = element.target;\r\n        this.setState ({ filter: value });  \r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.wrapper}>\r\n                    <h1>Phonebook</h1>\r\n                    <ContactForm /> \r\n                    <h2>Contacts</h2>\r\n                    <Filter /> \r\n                    {this.props.isLoading && <h1>Loading...</h1>}\r\n                    <ContactList />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n  \r\nconst mapStateToProps = state => ({\r\n    isLoading: getIsLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContact: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n // persistStore, \r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, \r\n} from 'redux-persist';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport logger from 'redux-logger';\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  }, \r\n}), logger]\r\n\r\nconst store = configureStore({\r\n  reducer: { state: contactsReducer },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n//const persistor = persistStore(store);\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n// import { PersistGate } from 'redux-persist/integration/react'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={'loading'} persistor={store.persistor}> */}\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}